인터페이스는 메서드의 선언부, 즉 시그니처만 제공해서 사용자 입장에서 기능을 일관되게 사용할 수 있도록 한다.
각 구현 클래스는 자신만의 멤버 변수와 내부 메서드로 같은 이름의 메서드를 오버라이딩하며, 서로 완전히 다른 기능을 수행한다.
다양한 구현 클래스 덕분에 인터페스의 정의된 메서드 하나로도 다양한 동작이 가능해지고, 호출하는 쪽은 인터페이스만 알고 있으면 되기 때문에 실제 구현 클래스에 의존하지 않는다.
필요하면 구현체 코드를 직접 분석해서 내부 동작을 이해하거나 기능을 확장할 수도 있지만, 기능이 예상했던것과 똑같이 정상 작동 시에는 내부에 신경 쓰지 않아도 된다.
이러한 구조가 바로 다형성과 느슨한 결합을 실현하여, 시스템의 유연성과 확장성, 유지보수성, 그리고 테스트 용이성을 크게 높여 준다.